import { useState, useMemo } from "react";
import { Link } from "react-router-dom";
import {
  TrendingUp,
  Users,
  Calendar,
  Trophy,
  ArrowRight,
  Star,
  Zap,
  Target,
  Search,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import CompetitionCard from "@/components/CompetitionCard";
import SearchFilters from "@/components/SearchFilters";
import { mockCompetitions, competitionCategories } from "@/lib/mockData";
import { SearchFilters as SearchFiltersType, Competition } from "@/types";

export default function Index() {
  const [filters, setFilters] = useState<SearchFiltersType>({});
  const [searchQuery, setSearchQuery] = useState("");

  const filteredCompetitions = useMemo(() => {
    let filtered = mockCompetitions;

    // Search by query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(
        (comp) =>
          comp.title.toLowerCase().includes(query) ||
          comp.description.toLowerCase().includes(query) ||
          comp.organizer.toLowerCase().includes(query) ||
          comp.tags.some((tag) => tag.toLowerCase().includes(query)),
      );
    }

    // Apply filters
    if (filters.category?.length) {
      filtered = filtered.filter((comp) =>
        filters.category!.includes(comp.category),
      );
    }

    if (filters.level?.length) {
      filtered = filtered.filter((comp) => filters.level!.includes(comp.level));
    }

    if (filters.status?.length) {
      filtered = filtered.filter((comp) =>
        filters.status!.includes(comp.status),
      );
    }

    if (filters.isOnline !== undefined) {
      filtered = filtered.filter((comp) => comp.isOnline === filters.isOnline);
    }

    if (filters.prizePool) {
      filtered = filtered.filter((comp) => comp.prizePool);
    }

    if (filters.location) {
      const location = filters.location.toLowerCase();
      filtered = filtered.filter((comp) =>
        comp.location.toLowerCase().includes(location),
      );
    }

    return filtered;
  }, [filters, searchQuery, mockCompetitions]);

  const featuredCompetitions = mockCompetitions.filter((comp) => comp.featured);
  const upcomingCompetitions = mockCompetitions.filter(
    (comp) => comp.status === "registration-open",
  );
  const ongoingCompetitions = mockCompetitions.filter(
    (comp) => comp.status === "ongoing",
  );

  const stats = [
    {
      title: "Cu·ªôc thi ƒëang di·ªÖn ra",
      value: mockCompetitions.filter((c) => c.status === "ongoing").length,
      icon: TrendingUp,
      color: "text-green-600",
    },
    {
      title: "Th√†nh vi√™n ho·∫°t ƒë·ªông",
      value: "15.2K",
      icon: Users,
      color: "text-blue-600",
    },
    {
      title: "Cu·ªôc thi tu·∫ßn n√†y",
      value: mockCompetitions.filter((c) => c.status === "registration-open")
        .length,
      icon: Calendar,
      color: "text-purple-600",
    },
    {
      title: "T·ªïng gi·∫£i th∆∞·ªüng",
      value: "2.5B VNƒê",
      icon: Trophy,
      color: "text-yellow-600",
    },
  ];

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <section className="relative overflow-hidden bg-competition-hero py-20">
        <div className="absolute inset-0 bg-grid-white/10 bg-grid-16" />
        <div className="container relative">
          <div className="mx-auto max-w-4xl text-center text-white">
            <Badge className="mb-4 bg-white/20 text-white border-white/30">
              üéâ M·ªõi: T√≠ch h·ª£p l·ªãch Google Calendar
            </Badge>
            <h1 className="mb-6 text-4xl font-bold tracking-tight sm:text-6xl">
              N·ªÅn t·∫£ng cu·ªôc thi <br />
              <span className="text-white/90">h√†ng ƒë·∫ßu Vi·ªát Nam</span>
            </h1>
            <p className="mb-8 text-lg text-white/80 sm:text-xl max-w-2xl mx-auto">
              Kh√°m ph√°, tham gia v√† k·∫øt n·ªëi v·ªõi h√†ng ngh√¨n cu·ªôc thi ch·∫•t l∆∞·ª£ng.
              X√¢y d·ª±ng portfolio c√° nh√¢n v√† t√¨m ki·∫øm ƒë·ªëi t√°c ph√π h·ª£p v·ªõi k·ªπ nƒÉng
              c·ªßa b·∫°n.
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <Button
                size="lg"
                className="bg-white text-competition hover:bg-white/90"
              >
                <Search className="mr-2 h-5 w-5" />
                Kh√°m ph√° cu·ªôc thi
              </Button>
              <Button
                size="lg"
                variant="outline"
                className="border-white text-white hover:bg-white/10"
              >
                T·∫°o h·ªì s∆° c√° nh√¢n
                <ArrowRight className="ml-2 h-5 w-5" />
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-12 border-b">
        <div className="container">
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
            {stats.map((stat, index) => {
              const Icon = stat.icon;
              return (
                <Card key={index} className="text-center">
                  <CardContent className="pt-6">
                    <Icon className={`h-8 w-8 mx-auto mb-3 ${stat.color}`} />
                    <div className="text-2xl font-bold mb-1">{stat.value}</div>
                    <div className="text-sm text-muted-foreground">
                      {stat.title}
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      </section>

      {/* Main Content */}
      <section className="py-12">
        <div className="container">
          <Tabs defaultValue="all" className="space-y-8">
            <div className="flex items-center justify-between">
              <TabsList className="grid w-fit grid-cols-4 lg:w-auto">
                <TabsTrigger value="all">T·∫•t c·∫£</TabsTrigger>
                <TabsTrigger value="featured">N·ªïi b·∫≠t</TabsTrigger>
                <TabsTrigger value="registration">ƒêang m·ªü</TabsTrigger>
                <TabsTrigger value="ongoing">ƒêang di·ªÖn ra</TabsTrigger>
              </TabsList>

              <div className="hidden lg:flex items-center space-x-2 text-sm text-muted-foreground">
                <span>Hi·ªÉn th·ªã {filteredCompetitions.length} cu·ªôc thi</span>
              </div>
            </div>

            <TabsContent value="all" className="space-y-6">
              <SearchFilters
                filters={filters}
                onFiltersChange={setFilters}
                onSearch={setSearchQuery}
              />

              {filteredCompetitions.length === 0 ? (
                <div className="text-center py-12">
                  <div className="text-6xl mb-4">üîç</div>
                  <h3 className="text-lg font-semibold mb-2">
                    Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
                  </h3>
                  <p className="text-muted-foreground mb-4">
                    Th·ª≠ ƒëi·ªÅu ch·ªânh b·ªô lÔøΩÔøΩc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm
                  </p>
                  <Button
                    onClick={() => {
                      setFilters({});
                      setSearchQuery("");
                    }}
                  >
                    X√≥a b·ªô l·ªçc
                  </Button>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                  {filteredCompetitions.map((competition) => (
                    <CompetitionCard
                      key={competition.id}
                      competition={competition}
                    />
                  ))}
                </div>
              )}
            </TabsContent>

            <TabsContent value="featured" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {featuredCompetitions.map((competition) => (
                  <CompetitionCard
                    key={competition.id}
                    competition={competition}
                    variant="featured"
                  />
                ))}
              </div>
            </TabsContent>

            <TabsContent value="registration" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {upcomingCompetitions.map((competition) => (
                  <CompetitionCard
                    key={competition.id}
                    competition={competition}
                  />
                ))}
              </div>
            </TabsContent>

            <TabsContent value="ongoing" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
                {ongoingCompetitions.map((competition) => (
                  <CompetitionCard
                    key={competition.id}
                    competition={competition}
                  />
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </section>

      {/* Categories Section */}
      <section className="py-16 bg-muted/30">
        <div className="container">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold mb-4">Kh√°m ph√° theo lƒ©nh v·ª±c</h2>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              T√¨m ki·∫øm cu·ªôc thi ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† k·ªπ nƒÉng c·ªßa b·∫°n
            </p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
            {competitionCategories.map((category) => (
              <Card
                key={category.name}
                className="group cursor-pointer card-hover text-center p-4"
                onClick={() => setFilters({ category: [category.name as any] })}
              >
                <div className="text-3xl mb-2">{category.icon}</div>
                <div className="text-sm font-medium group-hover:text-primary transition-colors">
                  {category.label}
                </div>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16">
        <div className="container">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold mb-4">
              T·∫°i sao ch·ªçn Contest Buddy?
            </h2>
            <p className="text-muted-foreground max-w-2xl mx-auto">
              N·ªÅn t·∫£ng to√†n di·ªán gi√∫p b·∫°n ph√°t tri·ªÉn k·ªπ nƒÉng v√† x√¢y d·ª±ng m·∫°ng
              l∆∞·ªõi
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <Card className="text-center p-6">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                <Target className="h-6 w-6 text-blue-600" />
              </div>
              <h3 className="font-semibold mb-2">G·ª£i √Ω th√¥ng minh</h3>
              <p className="text-sm text-muted-foreground">
                Thu·∫≠t to√°n AI g·ª£i √Ω cu·ªôc thi v√† ƒë·ªëi t√°c ph√π h·ª£p v·ªõi k·ªπ nƒÉng,
                tr∆∞·ªùng h·ªçc v√† khu v·ª±c c·ªßa b·∫°n
              </p>
            </Card>

            <Card className="text-center p-6">
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                <Users className="h-6 w-6 text-purple-600" />
              </div>
              <h3 className="font-semibold mb-2">Portfolio c√° nh√¢n</h3>
              <p className="text-sm text-muted-foreground">
                X√¢y d·ª±ng h·ªì s∆° c√¥ng khai v·ªõi th√†nh t√≠ch, k·ªπ nƒÉng v√† nh·∫≠n ƒë√°nh
                gi√° t·ª´ c·ªông ƒë·ªìng
              </p>
            </Card>

            <Card className="text-center p-6">
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4">
                <Calendar className="h-6 w-6 text-green-600" />
              </div>
              <h3 className="font-semibold mb-2">Qu·∫£n l√Ω l·ªãch thi</h3>
              <p className="text-sm text-muted-foreground">
                T·ª± ƒë·ªông ƒë·ªìng b·ªô v·ªõi Google Calendar v√† nh·∫≠n th√¥ng b√°o deadline
                theo c√†i ƒë·∫∑t c√° nh√¢n
              </p>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-competition-hero">
        <div className="container">
          <div className="text-center text-white">
            <h2 className="text-3xl font-bold mb-4">
              S·∫µn s√†ng b·∫Øt ƒë·∫ßu h√†nh tr√¨nh thi ƒë·∫•u?
            </h2>
            <p className="text-lg text-white/80 mb-8 max-w-2xl mx-auto">
              Tham gia c·ªông ƒë·ªìng h∆°n 15,000 th√†nh vi√™n v√† kh√°m ph√° c∆° h·ªôi ph√°t
              tri·ªÉn b·∫£n th√¢n
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <Button
                size="lg"
                className="bg-white text-competition hover:bg-white/90"
              >
                ƒêƒÉng k√Ω mi·ªÖn ph√≠
              </Button>
              <Button
                size="lg"
                variant="outline"
                className="border-white text-white hover:bg-white/10"
              >
                T√¨m hi·ªÉu th√™m
              </Button>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}
